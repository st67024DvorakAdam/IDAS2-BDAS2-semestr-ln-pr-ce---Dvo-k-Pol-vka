-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2023-10-30 16:36:16 SEČ
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adresa (
    id            NUMBER NOT NULL,
    ulice         VARCHAR2(64) NOT NULL,
    mesto         VARCHAR2(32) NOT NULL,
    cislo_popisne NUMBER NOT NULL,
    stat          VARCHAR2(32) NOT NULL,
    psc           NUMBER NOT NULL
);

ALTER TABLE adresa ADD CONSTRAINT adresa_pk PRIMARY KEY ( id );

CREATE TABLE asistent (
    id             NUMBER NOT NULL,
    pracovni_napln VARCHAR2(255)
);

ALTER TABLE asistent ADD CONSTRAINT asistent_pk PRIMARY KEY ( id );

CREATE TABLE doktor (
    id             NUMBER NOT NULL,
    pracovni_napln VARCHAR2(255)
);

ALTER TABLE doktor ADD CONSTRAINT doktor_pk PRIMARY KEY ( id );

CREATE TABLE foto (
    id               NUMBER NOT NULL,
    nazev_souboru    VARCHAR2(128) NOT NULL,
    pripona          VARCHAR2(16) NOT NULL,
    datum_nahrani    DATE NOT NULL,
    datum_modifikace DATE NOT NULL,
    obrazek          BLOB NOT NULL
);

ALTER TABLE foto ADD CONSTRAINT foto_pk PRIMARY KEY ( id );

CREATE TABLE kontaktni_udaje (
    id      NUMBER NOT NULL,
    email   VARCHAR2(64) NOT NULL,
    telefon NUMBER NOT NULL
);

ALTER TABLE kontaktni_udaje ADD CONSTRAINT kontaktni_udaje_pk PRIMARY KEY ( id );

CREATE TABLE konudaje_pacient (
    pacient_id         NUMBER NOT NULL,
    kontaktni_udaje_id NUMBER NOT NULL
);

COMMENT ON COLUMN konudaje_pacient.pacient_id IS
    'id pacienta';

COMMENT ON COLUMN konudaje_pacient.kontaktni_udaje_id IS
    'id kontaktních údajů, které patří pacientovi';

ALTER TABLE konudaje_pacient ADD CONSTRAINT konudaje_pacient_pk PRIMARY KEY ( pacient_id,
                                                                              kontaktni_udaje_id );

CREATE TABLE konudaje_zamest (
    kontaktni_udaje_id NUMBER NOT NULL,
    zamestnanec_id     NUMBER NOT NULL
);

COMMENT ON COLUMN konudaje_zamest.kontaktni_udaje_id IS
    'id kontakních údajů, které se přiřadí určitému zaměstnancovi';

COMMENT ON COLUMN konudaje_zamest.zamestnanec_id IS
    'id zaměstnance';

ALTER TABLE konudaje_zamest ADD CONSTRAINT konudaje_zamest_pk PRIMARY KEY ( kontaktni_udaje_id,
                                                                            zamestnanec_id );

CREATE TABLE log (
    id             NUMBER NOT NULL,
    zprava         VARCHAR2(1024) NOT NULL,
    casove_razitko TIMESTAMP NOT NULL
);

ALTER TABLE log ADD CONSTRAINT log_pk PRIMARY KEY ( id );

CREATE TABLE oddel_zamest (
    zamestnanec_id NUMBER NOT NULL,
    oddeleni_id    NUMBER NOT NULL
);

COMMENT ON COLUMN oddel_zamest.zamestnanec_id IS
    'id zaměstnance';

COMMENT ON COLUMN oddel_zamest.oddeleni_id IS
    'id oddělení, na kterém zaměstnanec pracuje';

ALTER TABLE oddel_zamest ADD CONSTRAINT oddel_zamest_pk PRIMARY KEY ( zamestnanec_id,
                                                                      oddeleni_id );

CREATE TABLE oddeleni (
    id             NUMBER NOT NULL,
    nazev          VARCHAR2(100) NOT NULL,
    zamestnanec_id NUMBER NOT NULL
);

ALTER TABLE oddeleni ADD CONSTRAINT oddeleni_pk PRIMARY KEY ( id );

CREATE TABLE osobni_anamneza (
    id         NUMBER NOT NULL,
    zaznam     VARCHAR2(255) NOT NULL,
    pacient_id NUMBER NOT NULL
);

ALTER TABLE osobni_anamneza ADD CONSTRAINT osobni_anamneza_pk PRIMARY KEY ( id );

CREATE TABLE pacient (
    id                      NUMBER NOT NULL,
    jmeno                   VARCHAR2(32) NOT NULL,
    prijmeni                VARCHAR2(32) NOT NULL,
    rodne_cislo             NUMBER NOT NULL,
    pohlavi                 VARCHAR2(32) NOT NULL,
    zdravotni_pojistovna_id NUMBER NOT NULL,
    adresa_id               NUMBER NOT NULL
);

ALTER TABLE pacient ADD CONSTRAINT pacient_pk PRIMARY KEY ( id );

CREATE TABLE provedeny_vykon (
    id                  NUMBER NOT NULL,
    nazev               VARCHAR2(255) NOT NULL,
    cena                NUMBER NOT NULL,
    hrazeno_pojistovnou NUMBER NOT NULL,
    pacient_id          NUMBER NOT NULL
);

ALTER TABLE provedeny_vykon ADD CONSTRAINT provedeny_vykon_pk PRIMARY KEY ( id );

CREATE TABLE prubeh_hospitalizace (
    id               NUMBER NOT NULL,
    datum_nastupu    DATE NOT NULL,
    datum_propusteni DATE,
    popis            VARCHAR2(255),
    pacient_id       NUMBER NOT NULL,
    oddeleni_id      NUMBER NOT NULL
);

ALTER TABLE prubeh_hospitalizace ADD CONSTRAINT prubeh_hospitalizace_pk PRIMARY KEY ( id );

CREATE TABLE prubezna_nemoc (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(255) NOT NULL
);

ALTER TABLE prubezna_nemoc ADD CONSTRAINT prubezna_nemoc_pk PRIMARY KEY ( id );

CREATE TABLE role (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(64) NOT NULL
);

ALTER TABLE role ADD CONSTRAINT role_pk PRIMARY KEY ( id );

CREATE TABLE sestra (
    id             NUMBER NOT NULL,
    pracovni_napln VARCHAR2(255)
);

ALTER TABLE sestra ADD CONSTRAINT sestra_pk PRIMARY KEY ( id );

CREATE TABLE uzity_lek (
    id        NUMBER NOT NULL,
    nazev     VARCHAR2(255) NOT NULL,
    davkovani NUMBER(2) NOT NULL,
    doktor_id NUMBER NOT NULL
);

ALTER TABLE uzity_lek ADD CONSTRAINT uzity_lek_pk PRIMARY KEY ( id );

CREATE TABLE uzitylek_prubeznem (
    uzity_lek_id      NUMBER NOT NULL,
    prubezna_nemoc_id NUMBER NOT NULL
);

COMMENT ON COLUMN uzitylek_prubeznem.uzity_lek_id IS
    'id užitého léku';

COMMENT ON COLUMN uzitylek_prubeznem.prubezna_nemoc_id IS
    'id průběžné nemoci, na kterou platí konkrétní lék';

ALTER TABLE uzitylek_prubeznem ADD CONSTRAINT uzitylek_prubeznem_pk PRIMARY KEY ( uzity_lek_id,
                                                                                  prubezna_nemoc_id );

CREATE TABLE uzivatel (
    id             NUMBER NOT NULL,
    jmeno          VARCHAR2(64) NOT NULL,
    heslo          VARCHAR2(1024) NOT NULL,
    role_id        NUMBER NOT NULL,
    zamestnanec_id NUMBER NOT NULL,
    salt           VARCHAR2(1024) NOT NULL
);

CREATE UNIQUE INDEX uzivatel__idx ON
    uzivatel (
        zamestnanec_id
    ASC );

ALTER TABLE uzivatel ADD CONSTRAINT uzivatel_pk PRIMARY KEY ( id );

CREATE TABLE zamestnanec (
    id               NUMBER NOT NULL,
    jmeno            VARCHAR2(32) NOT NULL,
    prijmeni         VARCHAR2(32) NOT NULL,
    rodne_cislo      NUMBER NOT NULL,
    pohlavi          VARCHAR2(32) NOT NULL,
    zamestnanec_type VARCHAR2(11) NOT NULL,
    zamestnanec_id   NUMBER,
    foto_id          NUMBER NOT NULL
);

ALTER TABLE zamestnanec
    ADD CONSTRAINT ch_inh_zamestnanec CHECK ( zamestnanec_type IN ( 'ASISTENT', 'DOKTOR', 'SESTRA', 'ZAMESTNANEC' ) );

COMMENT ON COLUMN zamestnanec.zamestnanec_type IS
    'diskrimináto, který určuje jaké povolání zaměstnanec vykonává';

CREATE UNIQUE INDEX zamestnanec__idx ON
    zamestnanec (
        foto_id
    ASC );

ALTER TABLE zamestnanec ADD CONSTRAINT zamestnanec_pk PRIMARY KEY ( id );

CREATE TABLE zdravkarta_prubeznem (
    zdravotni_karta_id NUMBER NOT NULL,
    prubezna_nemoc_id  NUMBER NOT NULL
);

COMMENT ON COLUMN zdravkarta_prubeznem.zdravotni_karta_id IS
    'id zdravotní karty do které patří nemoc';

COMMENT ON COLUMN zdravkarta_prubeznem.prubezna_nemoc_id IS
    'id průběžné nemoci, která je v konkrétní zdravotní kartě';

ALTER TABLE zdravkarta_prubeznem ADD CONSTRAINT zdravkarta_prubeznem_pk PRIMARY KEY ( zdravotni_karta_id,
                                                                                      prubezna_nemoc_id );

CREATE TABLE zdravotni_karta (
    id         NUMBER NOT NULL,
    pacient_id NUMBER NOT NULL
);

ALTER TABLE zdravotni_karta ADD CONSTRAINT zdravotni_karta_pk PRIMARY KEY ( id );

CREATE TABLE zdravotni_pojistovna (
    id      NUMBER NOT NULL,
    nazev   VARCHAR2(255) NOT NULL,
    zkratka NUMBER(3) NOT NULL
);

ALTER TABLE zdravotni_pojistovna ADD CONSTRAINT zdravotni_pojistovna_pk PRIMARY KEY ( id );

CREATE TABLE zprava (
    id             NUMBER NOT NULL,
    uzivatel_id    NUMBER NOT NULL,
    uzivatel_id2   NUMBER NOT NULL,
    obsah          CLOB NOT NULL,
    casove_razitko TIMESTAMP NOT NULL
);

ALTER TABLE zprava ADD CONSTRAINT zprava_pk PRIMARY KEY ( id );

ALTER TABLE asistent
    ADD CONSTRAINT asistent_zamestnanec_fk FOREIGN KEY ( id )
        REFERENCES zamestnanec ( id );

ALTER TABLE doktor
    ADD CONSTRAINT doktor_zamestnanec_fk FOREIGN KEY ( id )
        REFERENCES zamestnanec ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE konudaje_pacient
    ADD CONSTRAINT konudaje_pacient_kontaktni_udaje_fk FOREIGN KEY ( kontaktni_udaje_id )
        REFERENCES kontaktni_udaje ( id );

ALTER TABLE konudaje_pacient
    ADD CONSTRAINT konudaje_pacient_pacient_fk FOREIGN KEY ( pacient_id )
        REFERENCES pacient ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE konudaje_zamest
    ADD CONSTRAINT konudaje_zamest_kontaktni_udaje_fk FOREIGN KEY ( kontaktni_udaje_id )
        REFERENCES kontaktni_udaje ( id );

ALTER TABLE konudaje_zamest
    ADD CONSTRAINT konudaje_zamest_zamestnanec_fk FOREIGN KEY ( zamestnanec_id )
        REFERENCES zamestnanec ( id );

ALTER TABLE oddel_zamest
    ADD CONSTRAINT oddel_zamest_oddeleni_fk FOREIGN KEY ( oddeleni_id )
        REFERENCES oddeleni ( id );

ALTER TABLE oddel_zamest
    ADD CONSTRAINT oddel_zamest_zamestnanec_fk FOREIGN KEY ( zamestnanec_id )
        REFERENCES zamestnanec ( id );

ALTER TABLE oddeleni
    ADD CONSTRAINT oddeleni_zamestnanec_fk FOREIGN KEY ( zamestnanec_id )
        REFERENCES zamestnanec ( id );

ALTER TABLE osobni_anamneza
    ADD CONSTRAINT osobni_anamneza_pacient_fk FOREIGN KEY ( pacient_id )
        REFERENCES pacient ( id );

ALTER TABLE pacient
    ADD CONSTRAINT pacient_adresa_fk FOREIGN KEY ( adresa_id )
        REFERENCES adresa ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE pacient
    ADD CONSTRAINT pacient_zdravotni_pojistovna_fk FOREIGN KEY ( zdravotni_pojistovna_id )
        REFERENCES zdravotni_pojistovna ( id );

ALTER TABLE provedeny_vykon
    ADD CONSTRAINT provedeny_vykon_pacient_fk FOREIGN KEY ( pacient_id )
        REFERENCES pacient ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE prubeh_hospitalizace
    ADD CONSTRAINT prubeh_hospitalizace_oddeleni_fk FOREIGN KEY ( oddeleni_id )
        REFERENCES oddeleni ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE prubeh_hospitalizace
    ADD CONSTRAINT prubeh_hospitalizace_pacient_fk FOREIGN KEY ( pacient_id )
        REFERENCES pacient ( id );

ALTER TABLE sestra
    ADD CONSTRAINT sestra_zamestnanec_fk FOREIGN KEY ( id )
        REFERENCES zamestnanec ( id );

ALTER TABLE uzity_lek
    ADD CONSTRAINT uzity_lek_doktor_fk FOREIGN KEY ( doktor_id )
        REFERENCES doktor ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE uzitylek_prubeznem
    ADD CONSTRAINT uzitylek_prubeznem_prubezna_nemoc_fk FOREIGN KEY ( prubezna_nemoc_id )
        REFERENCES prubezna_nemoc ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE uzitylek_prubeznem
    ADD CONSTRAINT uzitylek_prubeznem_uzity_lek_fk FOREIGN KEY ( uzity_lek_id )
        REFERENCES uzity_lek ( id );

ALTER TABLE uzivatel
    ADD CONSTRAINT uzivatel_role_fk FOREIGN KEY ( role_id )
        REFERENCES role ( id );

ALTER TABLE uzivatel
    ADD CONSTRAINT uzivatel_zamestnanec_fk FOREIGN KEY ( zamestnanec_id )
        REFERENCES zamestnanec ( id );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_foto_fk FOREIGN KEY ( foto_id )
        REFERENCES foto ( id );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_zamestnanec_fk FOREIGN KEY ( zamestnanec_id )
        REFERENCES zamestnanec ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE zdravkarta_prubeznem
    ADD CONSTRAINT zdravkarta_prubeznem_prubezna_nemoc_fk FOREIGN KEY ( prubezna_nemoc_id )
        REFERENCES prubezna_nemoc ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE zdravkarta_prubeznem
    ADD CONSTRAINT zdravkarta_prubeznem_zdravotni_karta_fk FOREIGN KEY ( zdravotni_karta_id )
        REFERENCES zdravotni_karta ( id );

ALTER TABLE zdravotni_karta
    ADD CONSTRAINT zdravotni_karta_pacient_fk FOREIGN KEY ( pacient_id )
        REFERENCES pacient ( id );

ALTER TABLE zprava
    ADD CONSTRAINT zprava_uzivatel_fk FOREIGN KEY ( uzivatel_id )
        REFERENCES uzivatel ( id );

ALTER TABLE zprava
    ADD CONSTRAINT zprava_uzivatel_fkv2 FOREIGN KEY ( uzivatel_id2 )
        REFERENCES uzivatel ( id );

CREATE OR REPLACE TRIGGER arc_fkarc_1_asistent BEFORE
    INSERT OR UPDATE OF id ON asistent
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.zamestnanec_type
    INTO d
    FROM
        zamestnanec a
    WHERE
        a.id = :new.id;

    IF ( d IS NULL OR d <> 'ASISTENT' ) THEN
        raise_application_error(-20223, 'FK ASISTENT_ZAMESTNANEC_FK in Table ASISTENT violates Arc constraint on Table ZAMESTNANEC - discriminator column ZAMESTNANEC_TYPE doesn''t have value ''ASISTENT'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_sestra BEFORE
    INSERT OR UPDATE OF id ON sestra
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.zamestnanec_type
    INTO d
    FROM
        zamestnanec a
    WHERE
        a.id = :new.id;

    IF ( d IS NULL OR d <> 'SESTRA' ) THEN
        raise_application_error(-20223, 'FK SESTRA_ZAMESTNANEC_FK in Table SESTRA violates Arc constraint on Table ZAMESTNANEC - discriminator column ZAMESTNANEC_TYPE doesn''t have value ''SESTRA'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_doktor BEFORE
    INSERT OR UPDATE OF id ON doktor
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.zamestnanec_type
    INTO d
    FROM
        zamestnanec a
    WHERE
        a.id = :new.id;

    IF ( d IS NULL OR d <> 'DOKTOR' ) THEN
        raise_application_error(-20223, 'FK DOKTOR_ZAMESTNANEC_FK in Table DOKTOR violates Arc constraint on Table ZAMESTNANEC - discriminator column ZAMESTNANEC_TYPE doesn''t have value ''DOKTOR'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE adresa_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adresa_id_trg BEFORE
    INSERT ON adresa
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := adresa_id_seq.nextval;
END;
/

CREATE SEQUENCE foto_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER foto_id_trg BEFORE
    INSERT ON foto
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := foto_id_seq.nextval;
END;
/

CREATE SEQUENCE kontaktni_udaje_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kontaktni_udaje_id_trg BEFORE
    INSERT ON kontaktni_udaje
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := kontaktni_udaje_id_seq.nextval;
END;
/

CREATE SEQUENCE log_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER log_id_trg BEFORE
    INSERT ON log
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := log_id_seq.nextval;
END;
/

CREATE SEQUENCE oddeleni_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER oddeleni_id_trg BEFORE
    INSERT ON oddeleni
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := oddeleni_id_seq.nextval;
END;
/

CREATE SEQUENCE osobni_anamneza_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER osobni_anamneza_id_trg BEFORE
    INSERT ON osobni_anamneza
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := osobni_anamneza_id_seq.nextval;
END;
/

CREATE SEQUENCE pacient_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pacient_id_trg BEFORE
    INSERT ON pacient
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := pacient_id_seq.nextval;
END;
/

CREATE SEQUENCE provedeny_vykon_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER provedeny_vykon_id_trg BEFORE
    INSERT ON provedeny_vykon
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := provedeny_vykon_id_seq.nextval;
END;
/

CREATE SEQUENCE prubeh_hospitalizace_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER prubeh_hospitalizace_id_trg BEFORE
    INSERT ON prubeh_hospitalizace
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := prubeh_hospitalizace_id_seq.nextval;
END;
/

CREATE SEQUENCE prubezna_nemoc_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER prubezna_nemoc_id_trg BEFORE
    INSERT ON prubezna_nemoc
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := prubezna_nemoc_id_seq.nextval;
END;
/

CREATE SEQUENCE role_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER role_id_trg BEFORE
    INSERT ON role
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := role_id_seq.nextval;
END;
/

CREATE SEQUENCE uzity_lek_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER uzity_lek_id_trg BEFORE
    INSERT ON uzity_lek
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := uzity_lek_id_seq.nextval;
END;
/

CREATE SEQUENCE uzivatel_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER uzivatel_id_trg BEFORE
    INSERT ON uzivatel
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := uzivatel_id_seq.nextval;
END;
/

CREATE SEQUENCE zamestnanec_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamestnanec_id_trg BEFORE
    INSERT ON zamestnanec
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := zamestnanec_id_seq.nextval;
END;
/

CREATE SEQUENCE zdravotni_karta_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zdravotni_karta_id_trg BEFORE
    INSERT ON zdravotni_karta
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := zdravotni_karta_id_seq.nextval;
END;
/

CREATE SEQUENCE zdravotni_pojistovna_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zdravotni_pojistovna_id_trg BEFORE
    INSERT ON zdravotni_pojistovna
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := zdravotni_pojistovna_id_seq.nextval;
END;
/

CREATE SEQUENCE zprava_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zprava_id_trg BEFORE
    INSERT ON zprava
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := zprava_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            25
-- CREATE INDEX                             2
-- ALTER TABLE                             54
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          20
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         17
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   9
-- WARNINGS                                 0
